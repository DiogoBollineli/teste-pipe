name: PipelineAS1

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch: 

jobs:
  build-job:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: instala dependencias Node
      uses: actions/setup-node@v3
      with:
        node-version: 16
    - name: instala dependencias
      run: npm install
    - name: realiza criacao da pasta build
      run: npm run build
    - name: Log in to Docker registry
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME}} -p ${{ secrets.DOCKER_PASSWORD}}  
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_IMAGE}}:latest .
    - name: Push Docker image to registry
      run: |
        docker push ${{ secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_IMAGE}}:latest


  security-test: # SAST
      runs-on: ubuntu-latest
      needs: [build-job]
      name: eslint-scan
      strategy:
        fail-fast: false
      steps:
        - name: Checkout code
          uses: actions/checkout@v3
        - name: Use Node.js 16
          uses: actions/setup-node@v3
          with: 
            node-version: 16
        - name: Install dependencies
          run: npm install
        - name: Install ESLint and security plugin
          run: npm install --save-dev eslint eslint-plugin-security
        - name: Run ESLint scan
          run: npm run lint 
        - name: Upload lint report
          uses: actions/upload-artifact@v3
          with:
            name: lint-report
            path: lint-report.zip
            

  deploy-job:
    runs-on: ubuntu-latest
    needs: [build-job]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Pull Docker image
        run: docker pull ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_IMAGE}}:${{secrets.TAG}}
      - name: Run Docker container 
        run: |
          docker run -d -p 8080:80 ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_IMAGE}}:${{secrets.TAG}}
      - name: Install ngrok
        run: |
          curl -o ngrok.tgz https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
          unzip ngrok.tgz
      - name: Expose local server using ngrok
        run: |
          ./ngrok authtoken ${{ secrets.NGROK_AUTHTOKEN}}
          ./ngrok http http://localhost:8080
  